{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Note","text":"<pre><code>// Hello World!\n</code></pre>"},{"location":"LLVM/IO/","title":"Read and Write Files","text":""},{"location":"LLVM/IO/#raw_fd_ostream","title":"raw_fd_ostream","text":"<pre><code>#include \"llvm/Support/raw_ostream.h\"\n\nint main() {\n    std::error_code EC;\n\n    // llvm::raw_fd_ostream File(\"output.txt\", EC, raw_fd_ostream::F_Binary);\n    llvm::raw_fd_ostream File(\"output.ll\", EC, sys::fs::OF_None);\n\n    if (EC) {\n        llvm::errs() &lt;&lt; \"Cannot open file: \" &lt;&lt; EC.message() &lt;&lt; \"\\n\";\n        return 1;\n    }\n\n    File &lt;&lt; \"Hello, LLVM file output!\\n\";\n    File &lt;&lt; \"This is another line.\\n\";\n\n    return 0;\n}\n</code></pre>"},{"location":"LLVM/bitcodeWriter/","title":"Bitcode Writer","text":"<ul> <li>llvm/lib/Bitcode/Writer/BitcodeWriter.cpp</li> </ul>"},{"location":"LLVM/lazy_link/","title":"Lazy Link","text":"<pre><code>getLazyIRModule\n  parseModule\n    BitcodeReader::parseConstants\n    BitcodeReader::resolveGlobalAndIndirectSymbolInits\n    BitcodeReader::globalCleanup\n    BitcodeReader::parseFunctionRecord\n    BitcodeReader::parseValueSymbolTable\n    BitstreamCursor::readRecord\n</code></pre> <pre><code>Linker::linkModules\n  llvm::IRMover::move\n</code></pre>"},{"location":"LLVM/todo/","title":"TODO","text":""},{"location":"LLVM/todo/#simplifylibcallscpp","title":"SimplifyLibCalls.cpp","text":"SimplifyLibCalls.cpp<pre><code>// TODO:\n//   Additional cases that we need to add to this file:\n//\n// cbrt:\n//   * cbrt(expN(X))  -&gt; expN(x/3)\n//   * cbrt(sqrt(x))  -&gt; pow(x,1/6)\n//   * cbrt(cbrt(x))  -&gt; pow(x,1/9)\n//\n// exp, expf, expl:\n//   * exp(log(x))  -&gt; x\n//\n// log, logf, logl:\n//   * log(exp(x))   -&gt; x\n//   * log(exp(y))   -&gt; y*log(e)\n//   * log(exp10(y)) -&gt; y*log(10)\n//   * log(sqrt(x))  -&gt; 0.5*log(x)\n//\n// pow, powf, powl:\n//   * pow(sqrt(x),y) -&gt; pow(x,y*0.5)\n//   * pow(pow(x,y),z)-&gt; pow(x,y*z)\n//\n// signbit:\n//   * signbit(cnst) -&gt; cnst'\n//   * signbit(nncst) -&gt; 0 (if pstv is a non-negative constant)\n//\n// sqrt, sqrtf, sqrtl:\n//   * sqrt(expN(x))  -&gt; expN(x*0.5)\n//   * sqrt(Nroot(x)) -&gt; pow(x,1/(2*N))\n//   * sqrt(pow(x,y)) -&gt; pow(|x|,y*0.5)\n//\n</code></pre>"},{"location":"LLVM/todo/#first-good-issue","title":"First Good Issue","text":"<ul> <li>https://github.com/KhronosGroup/SPIRV-LLVM-Translator/issues/3180</li> </ul>"},{"location":"LLVM/document/coding_standards/","title":"Coding Standards","text":""},{"location":"LLVM/document/coding_standards/#assert","title":"Assert","text":"<p>If the peice of code should not be executed, use <code>llvm_unreachable</code> instead of <code>llvm_assert</code>.     <pre><code>llvm_unreachable(\"This code should not be executed\");\n</code></pre></p> Tags <ul> <li>clang-format</li> </ul>"},{"location":"LLVM/document/flow/","title":"Flow","text":"<p>Generate LLVM IR with clang:</p> <pre><code>clang -S -emit-llvm code.c -o code.ll\n</code></pre> <p>Run optimizations:</p> <pre><code>opt -O3 code.ll -o code_opt.ll\n</code></pre>"},{"location":"LLVM/document/links/","title":"Document Links","text":"<ul> <li>Coding Standards</li> </ul>"},{"location":"LLVM/document/setup/","title":"Setup Environment","text":""},{"location":"LLVM/document/setup/#build-code","title":"Build Code","text":"<pre><code>cmake -G Ninja \\\n    path/to/llvm-project/llvm \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n    -DLLVM_USE_LINKER=\"lld\"\nninja -j$(nproc)\n</code></pre> Flags <ul> <li><code>-DCMAKE_BUILD_TYPE=Debug</code>: Build in debug mode.</li> <li><code>-DCMAKE_EXPORT_COMPILE_COMMANDS=ON</code>: Generate compile commands for tools like clangd.</li> <li><code>-DLLVM_USE_LINKER=\"lld\"</code>: Use the LLVM linker.</li> </ul>"},{"location":"algorithm/dynamic_programming/","title":"Dynamic Programming","text":""},{"location":"algorithm/hash/","title":"Hash","text":"Tags <ul> <li>unordered_map</li> <li>vector</li> </ul>"},{"location":"algorithm/manacher_algorithm/","title":"Manacher's Algorithm","text":""},{"location":"algorithm/two_pointers/","title":"Two Pointers","text":""},{"location":"c%2B%2B/linked_list/","title":"Linked List","text":""},{"location":"c%2B%2B/vector/","title":"Vector","text":""},{"location":"leetcode/0001_two_sum/","title":"1. Two Sum","text":"<ul> <li>Leetcode: 1. Two Sum</li> </ul>"},{"location":"leetcode/0001_two_sum/#problem-statement","title":"Problem Statement","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p>"},{"location":"leetcode/0001_two_sum/#solutions","title":"Solutions","text":"HashTwo PointersBrute Force <p>We can use a hash map to store the indices of the elements as we iterate through the array. For each element, we check if the complement (i.e., <code>target - nums[i]</code>) exists in the hash map. If it does, we return the indices of the current element and its complement.</p> <ul> <li>Time Complexity: O(n)</li> <li>Space Complexity: O(n)</li> </ul> <pre><code>vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n    unordered_map&lt;int, int&gt; umap;\n    for (int i = 0; i &lt; nums.size(); i++) {\n        int n = nums[i];\n        if (umap.count(target - n)) {\n            return {umap[target - n], i};\n        }\n        umap[n] = i;\n    }\n    return {-1, -1};\n}\n</code></pre> <p>This approach is not applicable for this problem since the array is not sorted. However, if the array were sorted, we could use two pointers to find the two numbers that add up to the target.</p> <ul> <li>Time Complexity: O(n log n) for sorting, O(n) for the two-pointer traversal, resulting in O(n log n) overall.</li> <li>Space Complexity: O(n)</li> </ul> <pre><code>vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n  vector&lt;pair&lt;int, int&gt;&gt; sortedNums;\n\n  for (int i = 0; i &lt; nums.size(); ++i) {\n    sortedNums.push_back({nums[i], i});\n  }\n\n  sort(sortedNums.begin(), sortedNums.end());\n\n  int L = 0, R = sortedNums.size() - 1;\n  while (L &lt; R) {\n    int sum = sortedNums[L].first + sortedNums[R].first;\n    if (sum == target)\n      return {sortedNums[L].second, sortedNums[R].second};\n    else if (sum &lt; target)\n      ++L;\n    else\n      --R;\n  }\n  return {-1, -1}; // Return -1, -1 if no solution is found\n}\n</code></pre> <p>We can use a brute force approach by checking every pair of elements in the array to see if they add up to the target. This approach has a time complexity of <code>O(n^2)</code>.</p> <ul> <li>Time Complexity: O(n^2)</li> <li>Space Complexity: O(1)</li> </ul> <pre><code>vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n    for (int i = 0; i &lt; nums.size(); i++) {\n        for (int j = i + 1; j &lt; nums.size(); j++) {\n            if (nums[i] + nums[j] == target) {\n                return {i, j};\n            }\n        }\n    }\n    return {-1, -1};\n}\n</code></pre> Tags <ul> <li>Leetcode Easy</li> <li>Hash</li> <li>Unordered Map</li> <li>Two Pointers</li> </ul>"},{"location":"leetcode/0002_add_two_numbers/","title":"2. Add Two Numbers","text":"<ul> <li>Leetcode: 2. Add Two Numbers</li> </ul>"},{"location":"leetcode/0002_add_two_numbers/#problem-statement","title":"Problem Statement","text":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>"},{"location":"leetcode/0002_add_two_numbers/#solutions","title":"Solutions","text":"<pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n    int lead = 0;\n    ListNode root;\n    ListNode *ptr = &amp;root;\n    for (; l1 &amp;&amp; l2; l1 = l1-&gt;next, l2 = l2-&gt;next) {\n        int value = l1-&gt;val + l2-&gt;val + lead;\n        ListNode *node = new ListNode(value % 10);\n        lead = value / 10;\n        ptr-&gt;next = node;\n        ptr = ptr-&gt;next;\n    }\n\n    for (; l1; l1 = l1-&gt;next) {\n        int value = l1-&gt;val + lead;\n        ListNode *node = new ListNode(value % 10);\n        lead = value / 10;\n        ptr-&gt;next = node;\n        ptr = ptr-&gt;next;\n    }\n\n    for (; l2; l2 = l2-&gt;next) {\n        int value = l2-&gt;val + lead;\n        ListNode *node = new ListNode(value % 10);\n        lead = value / 10;\n        ptr-&gt;next = node;\n        ptr = ptr-&gt;next;\n    }\n\n    if (lead)\n        ptr-&gt;next = new ListNode(lead);\n\n    return root.next;\n}\n</code></pre> Tags <ul> <li>Leetcode Medium</li> <li>Linked List</li> </ul>"},{"location":"leetcode/0003_longest_substring_without_repeating_characters/","title":"3. Longest Substring Without Repeating Characters","text":"<ul> <li>Leetcode: 3. Longest Substring Without Repeating Characters</li> </ul>"},{"location":"leetcode/0003_longest_substring_without_repeating_characters/#problem-statement","title":"Problem Statement","text":"<p>Given a string <code>s</code>, find the length of the longest substring without duplicate characters.</p>"},{"location":"leetcode/0003_longest_substring_without_repeating_characters/#solutions","title":"Solutions","text":"Hash <pre><code>int lengthOfLongestSubstring(string s) {\n    vector&lt;int&gt; table(256, -1);\n\n    int l = 0, ans = 0;\n    for (int i = 0; i &lt; s.size(); i++) {\n        char c = s[i];\n        l = max(table[c] + 1, l);\n        ans = max(i - l + 1, ans);\n        table[c] = i;\n    }\n    return ans;\n}\n</code></pre> Tags <ul> <li>Leetcode Medium</li> <li>Hash</li> </ul>"},{"location":"leetcode/0005_longest_palindromic_substring/","title":"5. Longest Palindromic Substring","text":"<ul> <li>Leetcode: 5. Longest Palindromic Substring</li> </ul>"},{"location":"leetcode/0005_longest_palindromic_substring/#problem-statement","title":"Problem Statement","text":"<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p>"},{"location":"leetcode/0005_longest_palindromic_substring/#solutions","title":"Solutions","text":"Brute ForceExpand Around CenterDynamic Programming <p>Check all possible substrings and determine if they are palindromes.</p> <ul> <li>Time Complexity: <code>O(n^3)</code></li> <li>Space Complexity: <code>O(1)</code></li> </ul> <pre><code>string longestPalindrome(string s) {\n    int L = 0, R = 0, Max = 0;\n    for (int i = 0; i &lt; s.size(); i++) {\n        for (int j = i; j &lt; s.size(); j++) {\n            int isPalindrome = true;\n\n            for (int k = 0; k &lt; (j - i + 1) / 2; k++) {\n                if (s[i + k] != s[j - k]) {\n                    isPalindrome = false;\n                    break;\n                }\n            }\n\n            if (isPalindrome &amp;&amp; j - i + 1 &gt; Max) {\n                L = i;\n                R = j;\n                Max = j - i + 1;\n            }\n        }\n    }\n\n    return string(s.begin() + L, s.begin() + R + 1);\n}\n</code></pre> <p>Expand around each character and each pair of characters to find the longest palindromic substring.</p> <ul> <li>Time Complexity: <code>O(n^2)</code></li> <li>Space Complexity: <code>O(1)</code></li> </ul> <pre><code>string longestPalindrome(string s) {\n\n    auto expandFromCenter = [&amp;] (int l, int r) {\n        while (l &gt;= 0 &amp;&amp; r &lt; s.size() &amp;&amp; s[l] == s[r]) {\n            l--;\n            r++;\n        }\n        l++; r--;\n        if (r &lt; l)\n            return string(\"\");\n        return s.substr(l, r - l + 1);\n    };\n\n    string ans = s.substr(0, 1);\n    for (int i = 0; i &lt; s.size(); i++) {\n        string odd = expandFromCenter(i, i);\n        string even = expandFromCenter(i, i + 1);\n        if (odd.size() &gt; ans.size())\n            ans = odd;\n        if (even.size() &gt; ans.size())\n            ans = even;\n    }\n\n    return ans;\n}\n</code></pre> <p>Use a 2D DP table to quickly check if substrings are palindromes. <code>dp[i][j]</code> is true if the substring <code>s[i...j]</code> is a palindrome.</p> <p>If <code>s[i] == s[j]</code> and the substring <code>s[i+1..j-1]</code> is a palindrome, then <code>s[i..j]</code> is also a palindrome, otherwise it is not.</p> <ul> <li>Time Complexity: <code>O(n^2)</code></li> <li>Space Complexity: <code>O(n^2)</code></li> </ul> <pre><code>string longestPalindrome(string s) {\n    vector&lt;vector&lt;bool&gt;&gt; dp(s.size(), vector&lt;bool&gt;(s.size(), false));\n\n    int len = 1, start = 0;\n    for (int i = 0; i &lt; s.size(); i++) {\n        dp[i][i] = true;\n        for (int j = 0; j &lt; i; j++) {\n            if (s[j] == s[i] &amp;&amp; (i - j &lt; 2 || dp[j + 1][i - 1])) {\n                dp[j][i] = true;\n                if (len &lt; i - j + 1) {\n                    len = i - j + 1;\n                    start = j;\n                }\n            }\n        }\n    }\n\n    return s.substr(start, len);\n}\n</code></pre> Tags <ul> <li>Leetcode Medium</li> <li>Dynamic Programming</li> <li>Two Pointers</li> <li>Manacher's Algorithm</li> </ul>"},{"location":"leetcode/0006_zigzag_conversion/","title":"6. Zigzag Conversion","text":"<ul> <li>Leetcode: Zigzag Conversion</li> </ul>"},{"location":"leetcode/0006_zigzag_conversion/#problem-statement","title":"Problem Statement","text":"<p>The string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p> <pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre> <p>And then read line by line: <code>\"PAHNAPLSIIGYIR\"</code></p> <p>Write the code that will take a string and make this conversion given a number of rows:</p> <pre><code>string convert(string s, int numRows);\n</code></pre>"},{"location":"leetcode/0006_zigzag_conversion/#solutions","title":"Solutions","text":"Direction FlagFind Pattern <p>Push the characters into a vector of strings, one for each row. Use a direction flag to determine whether to move down or up the rows. When reaching the top or bottom row, reverse the direction.</p> <ul> <li>Time Complexity: O(n)</li> <li>Space Complexity: O(n)</li> </ul> <pre><code>string convert(string s, int numRows) {\n    if (numRows == 1)\n        return s;\n\n    vector&lt;string&gt; rowStrs(numRows);\n    int dir = 1, row = 0;\n    for (auto &amp;c: s) {\n        rowStrs[row] += c;\n        row += dir;\n        if (row == 0 || row == numRows - 1)\n            dir *= -1;\n    }\n\n    string ans = \"\";\n    for (auto &amp;str: rowStrs)\n        ans += str;\n    return ans;\n}\n</code></pre> <p>Calculate the length of each zigzag segment and use it to determine the characters' positions in the output string. This method avoids using extra space for row strings.</p> <ul> <li>Time Complexity: O(n)</li> <li>Space Complexity: O(1)</li> </ul> <pre><code>string convert(string s, int numRows) {\n    if (numRows == 1)\n        return s;\n\n    string ans = \"\";\n    int step = 2 * numRows - 2;\n    for (int row = 0; row &lt; numRows; row++) {\n        for (int i = row; i &lt; s.size(); i += step) {\n            ans += s[i];\n            int complement = i + step - 2 * row;\n            if (!(row == 0 || row == numRows - 1) &amp;&amp; complement &lt; s.size())\n                ans += s[complement];\n        }\n    }\n    return ans;\n}\n</code></pre> Tags <ul> <li>Leetcode Medium</li> </ul>"},{"location":"leetcode/0007_reverse_integer/","title":"7. Reverse Integer","text":"<ul> <li>Leetcode: 7. Reverse Integer</li> </ul>"},{"location":"leetcode/0007_reverse_integer/#problem-statement","title":"Problem Statement","text":"<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2^31, 2^31 - 1]</code>, then return <code>0</code>.</p> <p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p>"},{"location":"leetcode/0007_reverse_integer/#solution","title":"Solution","text":"<pre><code>int reverse(int x) {\n    int ans = 0;\n\n    while (x) {\n        if (ans &gt; INT_MAX / 10 || ans &lt; INT_MIN / 10)\n            return 0;\n        ans = ans * 10 + x % 10;\n        x /= 10;\n    }\n\n    return ans;\n}\n</code></pre> Tags <ul> <li>Leetcode Medium</li> </ul>"},{"location":"leetcode/leetcode_easy/","title":"Leetcode Easy","text":""},{"location":"leetcode/leetcode_hard/","title":"Leetcode Hard","text":""},{"location":"leetcode/leetcode_medium/","title":"Leetcode Medium","text":""},{"location":"linux/clang-format/","title":"clang-format","text":""},{"location":"linux/clang-format/#format-code","title":"Format Code","text":"<ul> <li> <p>Format the previous commit using clang-format:     <pre><code>git clang-format HEAD~1\n</code></pre></p> </li> <li> <p>Format only one file in the previous commit:     <pre><code>git clang-format HEAD~1 &lt;file&gt;\n</code></pre></p> </li> <li> <p>Add the changes to the commit:     <pre><code>git commit --amend --no-edit\n</code></pre></p> </li> </ul> Tags <ul> <li>git</li> </ul>"},{"location":"linux/cmake/","title":"Cmake","text":""},{"location":"linux/cmake/#add-new-options","title":"Add new options","text":"<p>If we want to add new options to cmake, we can do it by adding them in the cache.</p> CMakeCache.txt<pre><code>&lt;opt&gt;:BOOL=ON\n</code></pre>"},{"location":"linux/gcc/","title":"GNU GCC","text":""},{"location":"linux/gcc/#sanitizer","title":"Sanitizer","text":""},{"location":"linux/gcc/#addresssanitizer","title":"AddressSanitizer","text":"<pre><code>g++ -fsanitize=address -g your_program.cpp -o your_program\n</code></pre>"},{"location":"linux/gcc/#undefinedbehaviorsanitizer","title":"UndefinedBehaviorSanitizer","text":"<pre><code>g++ -fsanitize=undefined -g your_program.cpp -o your_program\n</code></pre>"},{"location":"linux/gcc/#keep-checking","title":"Keep Checking","text":"<p>Don't stop at the first error (AddressSanitizer):</p> <pre><code>export ASAN_OPTIONS=halt_on_error=0\n</code></pre>"},{"location":"linux/perf/","title":"perf","text":"<p>Perf is a performance analysis tool for Linux systems. It can be used to collect and analyze performance data from various sources, including CPU, memory, and I/O.</p>"},{"location":"linux/perf/#record-and-report","title":"Record and Report","text":"<ul> <li>Record performance data for a specific command:     <pre><code>perf record -g &lt;command&gt;\nperf report\n</code></pre></li> </ul>"},{"location":"linux/tmux/","title":"Tmux Settings","text":""},{"location":"linux/tmux/#oh-my-tmux","title":".oh-my-tmux","text":"<ul> <li>Change the icon in the left status bar</li> <li>Open <code>~/.tmux.conf.local</code></li> <li>Find the line that starts with <code>tmux_conf_theme_status_left</code></li> </ul> <pre><code>tmux_conf_theme_status_left=\" &lt;new icon&gt; #S ...\"\n</code></pre>"},{"location":"linux/zsh/","title":"zsh","text":""},{"location":"linux/zsh/#custom-icons","title":"Custom Icons","text":"<p>Modify the following settings in <code>~/.p10k.zsh</code> to add custom icons:</p> ~/.p10k.zsh<pre><code>typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(\n  os_icon # Add this line for OS icon\n  ...\n)\n\n# Add your custom icon here\ntypeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='\u2b50'\n</code></pre> <p>You can search icons from Nerd Fonts.</p> <ul> <li>Suggested font: Ubuntu Mono Nerd Font</li> </ul>"},{"location":"linux/cmake/cmake/","title":"CMake","text":""},{"location":"linux/cmake/cmake/#dependency-graph","title":"Dependency Graph","text":"<pre><code>cmake --graphviz=dep.dot ...\ndot -Tsvg dep.dot -o dep.svg\n</code></pre>"},{"location":"linux/git/base/","title":"base","text":""},{"location":"linux/git/base/#rebase","title":"Rebase","text":"<p><code>git rebase</code> is a powerful command that allows you to integrate changes from one branch into another by moving or combining a sequence of commits.</p> <pre><code>A---B---C---E (master) &lt;- other's change\n         \\\n          D (new-feature) &lt;- your change\n</code></pre> <p>For example, if you have a branch <code>new-feature</code> that you want to rebase onto the <code>master</code> branch, you can do so with the following command:</p> <pre><code>$ git branch\n  main\n* new-feature\n\n$ git rebase master\n</code></pre> <p>After running the rebase command, Git will take the commits from <code>new-feature</code></p> <pre><code>A---B---C---E---D'\n</code></pre>"},{"location":"linux/git/base/#resolve-conflicts","title":"Resolve Conflicts","text":"<p>There may be conflicts during the rebase process. If this happens, Git will pause. You can resolve the conflicts by editing the files, then rebase again:</p> <ol> <li> <p>Find the files with conflicts.</p> <pre><code>$ git status\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n        both modified:   &lt;conflicted file&gt;\n</code></pre> </li> <li> <p>Edit the files to resolve the conflicts. The conflicts will be marked in the files.</p> conflicted file<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour changes\n=======\nChanges from the branch you are rebasing onto\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre> </li> <li> <p>Add the resolved files and rebase again.</p> <pre><code>$ git add &lt;conflicted file&gt;\n$ git rebase --continue\n</code></pre> </li> </ol>"},{"location":"linux/git/base/#change-multiple-commits","title":"Change Multiple Commits","text":"<p>If you want to change multiple commits, you can use the <code>-i</code> (interactive) flag with the rebase command:</p> <pre><code>$ git rebase -i HEAD~3        # Rebase the last 3 commits\n$ git rebase -i &lt;commit-hash&gt; # Rebase from a specific commit\n</code></pre> Examples <p>For example, if you have the following commit history:</p> <pre><code>22186ea --- 2cae922 --- 4de22bd --- b76d5f7 --- f167f21\n</code></pre> <p>If you want to change the last three commits, you can run: <pre><code>$ git rebase -i 2cae922\n# or\n$ git rebase -i HEAD~3\n</code></pre></p> <p>It will open an editor with the last three commits listed. You can choose whether to pick or drop the commits:</p> <pre><code>pick 4de22bd &lt;message&gt;\ndrop b76d5f7 &lt;message&gt;\npick f167f21 &lt;message&gt;\n</code></pre> Action Description <code>pick</code> Keep the commit as is. <code>drop</code> Remove the commit from the history. <p>The commit <code>b76d5f7</code> will be dropped. The commit <code>f167f21</code> will be kept and be rehashed onto the previous commit. The final history will look like this:</p> <pre><code>22186ea --- 2cae922 --- 4de22bd --- 1f7bf84(f167f21)\n</code></pre>"},{"location":"linux/git/base/#show-log","title":"Show Log","text":"<p>You can view the commit history of your repository using the <code>git log</code> command. <pre><code>$ git log --all --graph --decorate --oneline\n</code></pre></p> Flags <ul> <li><code>--all</code>: Show all branches.</li> <li><code>--graph</code>: Show a text-based graph of the commit history.</li> <li><code>--decorate</code>: Show branch names and tags.</li> <li><code>--oneline</code>: Show each commit on a single line.</li> </ul>"},{"location":"linux/git/remote/","title":"remote","text":"<p>Check remotes:</p> <pre><code>git remote -v\n</code></pre> <p>Add a remote:</p> <pre><code>git remote add &lt;remote_tag&gt; &lt;remote_url&gt;\n</code></pre> <p>Push a branch to a remote:</p> <pre><code>git push &lt;remote_tag&gt; &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;\n</code></pre>"},{"location":"linux/mkdocs/code/","title":"Block Example","text":""},{"location":"linux/mkdocs/code/#code-block","title":"Code Block","text":""},{"location":"linux/mkdocs/code/#basic-code-block","title":"Basic Code Block","text":"ResultCode example.py<pre><code>def greet(name):\n  \"\"\"Function to greet a person.\"\"\"\n  return f\"Hello, {name}!\"\n</code></pre> <pre><code>py title=\"example.py\" linenums=\"1\"\ndef greet(name):\n  \"\"\"Function to greet a person.\"\"\"\n  return f\"Hello, {name}!\"\n</code></pre>"},{"location":"linux/mkdocs/code/#highlighted-lines","title":"Highlighted Lines","text":"ResultCode example.py<pre><code>def greet(name):\n  \"\"\"Function to greet a person.\"\"\"\n  return f\"Hello, {name}!\"\n</code></pre> <pre><code>py title=\"example.py\" linenums=\"1\" hl_lines=\"2\"\ndef greet(name):\n  \"\"\"Function to greet a person.\"\"\"\n  return f\"Hello, {name}!\"\n</code></pre>"},{"location":"linux/mkdocs/code/#tab-blocks","title":"Tab Blocks","text":"<p>Enabled by the following configuration in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>markdown_extensions:\n  - pymdownx.tabbed:\n      alternate_style: true\n</code></pre> <p>With the format below, you can create tabbed content: <pre><code>=== \"Plain Text\"\n\n    This is a plain text file.\n\n=== \"Unordered List\"\n\n    - Item 1\n    - Item 2\n    - Item 3\n\n=== \"Ordered List\"\n\n    1. First item\n    2. Second item\n    3. Third item\n</code></pre></p> <p>The result will look like this:</p> Plain TextUnordered ListOrdered List <p>This is a plain text file.</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"linux/mkdocs/code/#admonitions","title":"Admonitions","text":"<p>Amonitions start with <code>!!!</code> followed by the type of admonition.</p> ResultCode <p>Note Title</p> <p>This is a note admonition.</p> <pre><code>!!! note \"Note Title\"\n\n    This is a note admonition.\n</code></pre> <p>Collapsible admonitions can be created using the <code>???</code>:</p> ResultCode Collapsible Info <p>This is a collapsible info admonition.</p> <pre><code>??? info \"Collapsible Info\"\n\n    This is a collapsible info admonition.\n</code></pre>"},{"location":"linux/mkdocs/diagram/","title":"Diagram Example","text":""},{"location":"linux/mkdocs/diagram/#flowchart","title":"Flowchart","text":"<pre><code>flowchart TD\n    A[Start] --&gt; B{Is it sunny?}\n    B -- Yes --&gt; C[Go for a walk]\n    B -- No --&gt; D[Stay indoors]\n    C --&gt; E[Enjoy the day]\n    D --&gt; E</code></pre>"},{"location":"linux/mkdocs/diagram/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant System\n    User-&gt;&gt;System: Request data\n    System--&gt;&gt;User: Send data\n    User-&gt;&gt;System: Acknowledge receipt</code></pre>"},{"location":"linux/mkdocs/emoji/","title":"Emoji","text":"<p>Your can search emojis from documents.</p>"},{"location":"linux/ssh/socks_proxy/","title":"SOCKS Proxy","text":""},{"location":"linux/ssh/socks_proxy/#establis-a-socks-proxy-with-ssh","title":"Establis a SOCKS Proxy with SSH","text":"<p>Run this command to establish a SOCKS proxy using SSH: <pre><code>ssh -N -f -D &lt;port&gt; &lt;user&gt;@&lt;host&gt;\n</code></pre></p>"},{"location":"linux/ssh/socks_proxy/#open-chrome-with-socks-proxy","title":"Open Chrome with SOCKS Proxy","text":"<p>Add the following command to a batch file to open Chrome with the SOCKS proxy:</p> chrome.bat<pre><code>\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --proxy-server=\"socks://127.0.0.1:&lt;port&gt;\"\nexit # Close the terminal\n</code></pre> edge.bat<pre><code># kill existing Edge instances\ntaskkill /IM msedge.exe /F\n\n\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\" --proxy-server=\"socks://127.0.0.1:&lt;port&gt;\"\nexit # Close the terminal\n</code></pre>"},{"location":"linux/ssh/ssh_settings/","title":"SSH Settings","text":""},{"location":"linux/ssh/ssh_settings/#ubuntu-settings","title":"Ubuntu Settings","text":"<p>Add the following settings to your <code>~/.ssh/config</code> file to simplify SSH connections:</p> ~/.ssh/config<pre><code>Host myserver\n    HostName &lt;ip&gt;\n    User &lt;username&gt;\n    Port &lt;port&gt;\n</code></pre> <p>Directly type <code>ssh myserver</code> to connect to the server instead of using the full command. <pre><code>ssh myserver\n</code></pre></p>"},{"location":"linux/ssh/ssh_settings/#remote-port-forwarding","title":"Remote Port Forwarding","text":"<p>Forward a port from a remote server to your local machine. When you connect to <code>&lt;remote-port&gt;</code> on the remote server, it will forward the connection to <code>&lt;local-port&gt;</code> on your local machine.</p> <pre><code>ssh -N -f -R &lt;remote-port&gt;:localhost:&lt;local-port&gt; user@remote-host\n</code></pre> Flags <ul> <li><code>-N</code>: Do not execute a remote command.</li> <li><code>-f</code>: Run in the background.</li> <li><code>-R</code>: Specifies that the given port on the remote host is to be forwarded to the local machine.</li> <li>Redirect the message to a file:     <pre><code>ssh -N -f -v -R &lt;remote-port&gt;:localhost:&lt;local-port&gt; user@remote-host &gt; &lt;file path&gt; 2&gt;&amp;1\n</code></pre><ul> <li><code>-v</code>: Basic debugging output.</li> <li><code>-vv</code>: Medium debugging output.</li> <li><code>-vvv</code>: Detailed debugging output.</li> </ul> </li> </ul>"},{"location":"linux/ssh/ssh_settings/#turn-off-remote-port-forwarding","title":"Turn Off Remote Port Forwarding","text":"<p>Find the process ID (PID) of the SSH connection and kill it:</p> <pre><code>ps aux | grep \"ssh.*-R\"\n</code></pre> <p>Then, use the <code>kill</code> command with the PID:</p> <pre><code>kill -9 &lt;PID&gt;\n</code></pre>"},{"location":"linux/vim/copilot/","title":"Copilot Settings","text":""},{"location":"linux/vim/copilot/#panel-for-completion","title":"Panel for Completion","text":"<p>Open a window with up to 10 completions.</p> vim command mode<pre><code>:Copilot panel\n</code></pre>"},{"location":"linux/vim/copilot/#accepting-completions","title":"Accepting Completions","text":"<p>Default keybinding to accept a completion is <code>&lt;tab&gt;</code>. You can map it to another key if you prefer. For example, to use <code>&lt;c-j&gt;</code>:</p> .vimrc<pre><code>imap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-J&gt; copilot#Accept(\"\\&lt;CR&gt;\")\nlet g:copilot_no_tab_map = v:true\n</code></pre>"},{"location":"linux/vim/copilot/#reference","title":"Reference","text":"<ul> <li>Copilot Document</li> </ul>"},{"location":"linux/vim/settings/","title":"Vim Settings","text":""},{"location":"linux/vim/settings/#general-settings","title":"General Settings","text":"<p>Add path so that Vim can search files in specific directories: .vimrc<pre><code>set path+=&lt;path_to_your_files&gt;,&lt;another_path_to_your_files&gt;\n</code></pre></p>"},{"location":"windows/ssh/","title":"SSH Settings for Windows","text":""},{"location":"windows/ssh/#setting-up-ssh-config-in-windows","title":"Setting up SSH config in Windows","text":"<p>Create a config file in <code>C:\\Users\\&lt;YourUsername&gt;\\.ssh\\config</code> with the following content: SSH Config<pre><code>Host myserver\n    HostName example.com\n    User myuser\n    Port 22\n</code></pre></p> <p>Generate SSH keys if you haven't already: powershell<pre><code>ssh-keygen -t rsa\n</code></pre></p> <p>Copy the public key to the server: powershell<pre><code>cd C:\\Users\\&lt;YourUsername&gt;\ntype .ssh\\id_rsa.pub | ssh myserver \"cat &gt;&gt; .ssh/authorized_keys\"\n</code></pre></p>"},{"location":"windows/ssh/#forwarding-ssh-port-in-wsl-to-windows","title":"Forwarding SSH Port in WSL to Windows","text":"<p>In WSL, find IP address with: <pre><code>ip addr show eth0 | grep inet\n</code></pre></p> <p>Forward the SSH port from WSL to Windows using <code>netsh</code> command in PowerShell: <pre><code>netsh interface portproxy add v4tov4 listenport=2222 listenaddress=0.0.0.0 connectport=22 connectaddress=&lt;WSL IP&gt;\n</code></pre></p> <p>Enable the port <code>2222</code> in Windows Firewall: <pre><code>netsh advfirewall firewall add rule name=\"WSL SSH\" dir=in action=allow protocol=TCP localport=2222\n</code></pre></p>"},{"location":"windows/sysinternals/","title":"Sysinternals","text":"<p>The Sysinternals Suite is a collection of utilities to help manage, troubleshoot, and diagnose Windows systems and applications.</p>"},{"location":"windows/sysinternals/#install","title":"Install","text":"<p>Download and install the Sysinternals Suite from the official Microsoft website.</p>"},{"location":"windows/sysinternals/#listdlls","title":"listdlls","text":"<p>List all the DLLs loaded into processes.</p> cmd<pre><code># show all dlls loaded into processes\nlistdlls\n\n# only show dlls loaded into a specific process\nlistdlls &lt;process_name&gt;\n</code></pre>"},{"location":"windows/vs/","title":"Visual Studio","text":""},{"location":"windows/vs/#launch-settings","title":"Launch Settings","text":"<ul> <li>Location: <code>Project Root\\.vs\\launch.vs.json</code></li> </ul>"},{"location":"windows/vs/#arguments","title":"Arguments","text":"Property Description <code>args</code> Command line arguments to pass to the executable <code>name</code> Name of the launch configuration <code>project</code> Path to the executable to launch launch.vs.json<pre><code>{\n  \"version\": \"0.2.1\",\n  \"defaults\": {},\n  \"configurations\": [\n    {\n      \"type\": \"default\",\n      \"project\": \"bin\\\\Debug\\\\qclc.exe\",\n      \"projectTarget\": \"\",\n      \"name\": \"qclc-2\",\n      \"args\": [\n        \"--help\"\n      ]\n    },\n    {\n      ...\n    }\n  ]\n}\n</code></pre>"},{"location":"windows/windbg/","title":"WinDbg","text":""},{"location":"windows/windbg/#attach-to-a-process","title":"Attach to a Process","text":"<p>There are two ways to attach WinDbg to a running process:</p> <ol> <li>File -&gt; Attach to a Process -&gt; Select the desired process.</li> <li>Press <code>F6</code> and select the desired process from the list.</li> </ol>"},{"location":"windows/windbg/#threads","title":"Threads","text":"<ul> <li> <p>Show all threads in the process:</p> <pre><code>~* k\n</code></pre> </li> <li> <p>Switch to a specific thread (e.g., thread 3):</p> <pre><code>~3s\n</code></pre> </li> </ul>"},{"location":"windows/wsl/","title":"WSL","text":""},{"location":"windows/wsl/#install","title":"Install","text":"<p>Open PowerShell as Administrator and run:</p> PowerShell<pre><code>wsl --install\n</code></pre>"}]}